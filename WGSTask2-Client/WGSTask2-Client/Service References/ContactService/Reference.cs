//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WGSTask2_Client.ContactService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/ContactClassLibrary")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cNoHPField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cID {
            get {
                return this.cIDField;
            }
            set {
                if ((this.cIDField.Equals(value) != true)) {
                    this.cIDField = value;
                    this.RaisePropertyChanged("cID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cName {
            get {
                return this.cNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cNameField, value) != true)) {
                    this.cNameField = value;
                    this.RaisePropertyChanged("cName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cNoHP {
            get {
                return this.cNoHPField;
            }
            set {
                if ((object.ReferenceEquals(this.cNoHPField, value) != true)) {
                    this.cNoHPField = value;
                    this.RaisePropertyChanged("cNoHP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContactService.IContactService")]
    public interface IContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/InsertContact", ReplyAction="http://tempuri.org/IContactService/InsertContactResponse")]
        bool InsertContact(WGSTask2_Client.ContactService.Contact obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetAllContact", ReplyAction="http://tempuri.org/IContactService/GetAllContactResponse")]
        WGSTask2_Client.ContactService.Contact[] GetAllContact();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        bool DeleteContact(int Cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateContact", ReplyAction="http://tempuri.org/IContactService/UpdateContactResponse")]
        bool UpdateContact(WGSTask2_Client.ContactService.Contact obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceChannel : WGSTask2_Client.ContactService.IContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.ClientBase<WGSTask2_Client.ContactService.IContactService>, WGSTask2_Client.ContactService.IContactService {
        
        public ContactServiceClient() {
        }
        
        public ContactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertContact(WGSTask2_Client.ContactService.Contact obj) {
            return base.Channel.InsertContact(obj);
        }
        
        public WGSTask2_Client.ContactService.Contact[] GetAllContact() {
            return base.Channel.GetAllContact();
        }
        
        public bool DeleteContact(int Cid) {
            return base.Channel.DeleteContact(Cid);
        }
        
        public bool UpdateContact(WGSTask2_Client.ContactService.Contact obj) {
            return base.Channel.UpdateContact(obj);
        }
    }
}
